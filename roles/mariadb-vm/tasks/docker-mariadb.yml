- tags: always
  include_vars: vars/mariadb-vars.yml

- name: Check if MariaDB initial data folder exists
  ansible.builtin.stat:
    path: "{{ mariadb_dbdata_basepath }}/{{ item.name }}/"
  register: _mariadb_data_dir
  tags:
    - mariadb.rsync

- name: Copy init data
  shell:
    cmd: "rsync -av root@exopgesrv86:/var/lib/mysql/ {{ mariadb_dbdata_basepath }}/{{ item.name }}/"
  vars:
    - ansible_ssh_extra_args: -A
  when:
    - not _mariadb_data_dir.stat.exists
    - item.name == 'primary'
  tags:
    - mariadb.rsync

- name: Ensure MariaDB directories
  with_items:
    - '{{ mariadb_binlog_basepath }}/{{ item.name }}'
    - '{{ mariadb_dbdata_basepath }}/{{ item.name }}'
  ansible.builtin.file:
    state: directory
    path: '{{ item }}'
  tags:
    - mariadb.directories

- name: Create my.cnf file
  ansible.builtin.template:
    src: my.cnf
    dest: "{{ mariadb_dbconfig_basepath }}/my_{{ item.name }}.cnf"
  tags:
    - mariadb.container

- name: Ensure MariaDB container
  community.general.docker_container:
    name: 'mariadb_{{ item.name }}'
    state: started
    image: "mariadb:{{ mariadb_version }}"
    env:
      MARIADB_ROOT_PASSWORD: "{{ mariadb_secrets.root_password }}"
    ports:
      - "{{ item.port }}:3306"
    volumes:
      - "{{ mariadb_dbdata_basepath }}/{{ item.name }}:/var/lib/mysql"
      - "{{ mariadb_dbconfig_basepath }}/my_{{ item.name }}.cnf:/etc/mysql/mariadb.conf.d/my.cnf"
  tags:
    - mariadb.container

- name: "Upgrade MariaDB {{ item.name }}"
  community.docker.docker_container_exec:
    container: "mariadb_{{ item.name }}"
    command: "mariadb-upgrade --user={{ mariadb_secrets.superuser.user }} --host=127.0.0.1 --port=3306 --verbose --password={{ mariadb_secrets.superuser.password }}"
  register: _upgrade_result
  changed_when: >-
    "MariaDB is already upgraded" not in _upgrade_result.stdout
  tags:
    - mariadb.upgrade
